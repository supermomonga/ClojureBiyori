2日目 晴れた日は冒険しよう
===========================

1. アドベンチャーしよう
----------------------

　ぐたぐだと文法を解説するだけでは、退屈きわまりないものになってしまう。そこで、簡単なアドベンチャーゲームを作成してみよう。とはいえ、いきなり凄いものなんて出来るわけがない。だから、すごーく簡単なアドベンチャーゲームを作成してみよう。

　このアドベンチャーは、状況と行動の選択肢が出るという、すごいシンプルなゲームだ。古い言葉を使うなら、ゲームブックだ。

2. 貴方がClojureに伝えたいこと(read-line)
-----------------------------------------

　何はともあれ、ゲームにはプレイヤーの操作が必要だ。今回は、キーボードで、選択肢の番号を入力してもらう形にしようと思う。だから、手始めに、そこから始めよう。とはいっても、非常に簡単なもので、`read-line`関数を使えばいい。ありがちなサンプルだと、名前を入力して、それを返すという部分を作ってみよう、

```clojure
(println "貴方の名前はなんですか？")
(def your-name (read-line))
(println "こんにちは！" player-name)
```
　これで入力した文字列を、your-nameにセットすることができる。本当は、もっと上手いやりかたがあるけれども、今回は必要最低限でやっていこう。

3. 落としたのは、金の斧？銀の斧？(if, clojure.string/trim)
-------------------------------------

　今度は、有名な童話のシーンを再現してみよう。そのシーンとは、きこりが池に斧を落としたら、池の女神がやってくるシーンだ。

　複雑になりすぎないために、プレイヤーが行動を数字で選ばせるようにしよう。そこで、「3」だった場合だけ、金の斧と、銀の斧が手に入るようにしよう。

　さて、僕たちはいままで、値によって、表示する内容を変える、という方法をまだ知らなかった。この方法はある。もっとも簡単なのは`if`を使うことだ。

　`if`の役割は、値によって、あとでやるべきことを変えるということだ。僕たちの生活でも、「雨だったら家でだらだらしよう」とか考える。そういう風に、「○○だったら、××しよう」というのを表現できる。

```clojure
(println (if (= 2 (+ 1 1)) "正解" "間違い"))
```

　これを入力すると「正解」と出力されるはずだ。もし、ifの中の`2`を`3`にしたら、「間違い」と出力されるはずだ。どういうことなのかといえば、`if`のあとにある式が「真」か「偽」か、ということで結果が変わるようになっている。

　「真」と「偽」っていきなり言われると難しいけど、よくよく考えてみると簡単だ。

　私たちは、生活の中でいろんなものを比較する。例えば、あの店より、この店が安いとか、あるいは、このコロッケよりあのコロッケのほうが大きい、とかそういうことだ。当然、Clojureだって比較するのだ。

　たとえば、下の式を実行してみよう。

```clojure
(println (= 1 1)) ;; output: true
```

　この`true`というのは、前の式が「正しかった」ということをいう。逆に、`false`は間違いだった、ということをお知らせする。そして、`=`は、`AとBは一緒なの？`ということを表現している。

　ピンとこなければ、「1と1は同じだ！」といったら、君が嘘ついていることになるのかどうなのか、という風に考えてみるとよさそうだ。本当のことをいっているなら`true`、嘘をいっているなら`false`、それだけだ。`if`はこれを利用していて、正しいなら、3番目の値（式の結果）を、間違っているなら4番目（式の結果）を採用する。まとめると下の通りだ。

```
(if 比較する値(仮にxとする) xがtrueの場合に採用される値 xがfalseのときに採用される値)
```

```clojure
(println "「貴方が落としたのは、金の斧ですか？銀の斧ですか？」")
(println "1: 金の斧, 2: 銀の斧, 3: 普通の斧")
(def your-answer (read-line))
(if (= your-answer 3)
  (println "正直者には金の斧と銀の斧を与えましょう")
  (println "傲慢なものには、斧を返しません"))
```

　さて、これを実行して`3`を入れると、期待した通りの結果が返ってこないだろう。望むところとしては、"正直者には金の斧と銀の斧を与えましょう"と出てきて欲しいのだけれども、残念なことに"傲慢なものには、斧を返しません"と出る。それはそうで、文字列と数字は違うからだ。

```clojure
(= 3 "3") ;; => false
```

　ではどうするべきだろう？一つには素直に文字列を比較する、という方法がある。しかし、これにも少し罠がある。今回の場合、入力であった。例えば最後に空白が入ってたときのことを考えよう。

```clojure
(= "3" "3 ") ;; => false
```

　これは最初でも同じ事だ。

　この問題に関しては、次のように考えることができる。「僕たちは数字の文字列だけが欲しい。空白が入っているなら取り除いて欲しいんだ！」と。自作することだって出来るけど、clojureはちゃんと便利なものを用意してくれている。`clojure.string/trim`というものだ。ためしに、こいつを通過した`"   3   "`という文字列と、`"3"`を比較してみよう。

```clojure
(= "3" (clojure.string/trim "   3    ")) ;;true
```

　そう、trueになる！こいつは、前後の空白を取り除いてくれる関数なのだ。だから、こいつの動きがわかるように、次のように書いてみよう。

```clojure
;; output: = test =
(println (clojure.string/trim "     = test =    ")) 
```

　というわけで、文字列が取り出せた。

4. 無限ループって怖いね！
------------------------

というわけで、下のように書き直すことができる。

```
(println "「貴方が落としたのは、金の斧ですか？銀の斧ですか？」")
(println "1: 金の斧, 2: 銀の斧, 3: 普通の斧")
(def your-answer (clojure.string/trim (read-line)))
(if (= your-answer "3")
  (println "正直者には金の斧と銀の斧を与えましょう")
  (println "傲慢なものには、斧を返しません"))
```

　しかし、これもまだ問題がある。だって選択肢は1〜3のどれかだった筈だ。だけど、プレイヤーが間違えて`3#`みたいな入力をしたり、いじわるして`4`とか入力した場合でも、1と2を選んだことになってしまう！

　さて、これを`if`で無理やり実装すると、下のような汚いコードになる。

```
(if (= your-answer "3")
  (println "正直者には金の斧と銀の斧を与えましょう")
  (if (= your-answer "2")
    (println "傲慢なものには、斧を返しません")
    (if (= your-answer "1")
      (println "傲慢なものには、斧を返しません")
      (println "あなた、ちゃんと答えてください！"))))
```

　これは、むりやり日本語に直すと次のようになるだろう。

```
もし、your-answerが"3"であるなら、 "正直者には金の斧と銀の斧を与えましょう"と出力する
違うなら、your-answerが"2"であるかどうかを調べ、そうなら"傲慢なものには、斧を返しません"と出力する
違うなら、your-answerが"1"であるかどうかを調べ、そうなら"傲慢なものには、斧を返しません"と出力する
違うなら、"あなた、ちゃんと答えてください！"と出力する
```

　なにが冗長なんだろう？それは簡単だ。「違うなら」というところだ。下のように書ければ、もっとすっきりする。
```
もし、your-answerが"3"であるなら、 "正直者には金の斧と銀の斧を与えましょう"と出力する
your-answerが"2"であるなら、"傲慢なものには、斧を返しません"と出力する
your-answerが"1"であるなら、"傲慢なものには、斧を返しません"と出力する
上記にあてはまらないなら、"あなた、ちゃんと答えてください！"と出力する
```

(未完)