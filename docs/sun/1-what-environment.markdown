1日目 晴れた日は外でプログラミングのことについて考えよう
======================================================

　これは晴れの日の一日目だ。前書きに書いたように、晴れの日に関しては、少しだけ抽象的なことを書こうと思っている。たぶん、Clojureをよりよく知るためには役に立つこともあると思うけれども、しかしいきなり理解しようとすると難しいものも含まれている。

　これは、Clojureを単に使いたいとするならば、ちょっとだけ遠回りをする説明となってしまう部分も含まれる。

1. 変数だって、関数だって、みんなみんな属しているんだ
---------------------------------------------------

　Clojureでは、`def`や`defn`などを利用して、関数を定義したりする。しかし、ここでふと疑問に思うことが無いだろうか?そもそも、定義された`関数`とか、`シンボル`の情報って、何処に保存されているものなのだろうか?

　もちろん、ハードウェア的にはメモリ、ということになるけれども、しかしプログラムとして抽象化する場合、これらの定義が行われている場所を`環境(environment)`と呼ぶ。そして、この`環境(enviroment)`には`グローバルな環境(global environment)`と、`ローカルな環境(local environment)`というものが存在している。この両者は、本を呼んでいると「大域環境」とか「局地環境」とか呼んだりする。好きなほうを選べばいいと思う。

　さて、なぜこのような二つの環境を区分けする必要はあるのだろうか？

　まず一つに、全てをグローバルな環境に定義した場合を考える。

(TODO: 実例を書く)

　グローバルな環境の定義というのは、その定義は、何処からでも参照できることを特徴としている。

　必要なパーツを全てグローバルに定義してしまう場合、例えば定義の違いによって、その関数がオーバーライドされてしまう可能性が出てくる。関数の定義が二重にされることは、バグの原因を生み出す要因となる。したがって、そのときにしか使用しない関数については、できるだけ、必要なときに定義することが望ましい。

　そこで、ローカル環境というものが重要になる。ローカル環境内において定義された、関数であったり、シンボルというものは、そのローカル環境内においてのみ利用可能であり、その環境を脱した時に、その関数は無かったことにされる。

2.既にお前はスコープを使っている
-------------------------------

　例えば、その内部においてのみ利用できるシンボルみたいなものの実例とは何だろうか。実は既に僕たちはこのようなスコープを利用している。スコープとは、乱暴に言ってしまうならば、あるシンボルが定義された場合の有効な範囲のことだ。例えば、一日目に出てきた関数定義の例を見てみよう。

```clojure
(defn foo [bar]
   (println bar))
```

　この関数において、渡された値は`bar`として扱われる。しかし、この`bar`の有効期限というのは、関数の内部の中だけだ。これらがいちいちグローバル環境に定義されると、引数名が他の関数を上書きしてしまうことに注意しなければならなくなる。これはプログラミングをする精神衛生上、非常によろしくない。

　また、もう一つ、このような一時的な関数を定義するための方法がある。それが`let`だ。`let`は、そのカッコ内においてのみに通用するシンボルを定義する。

(TODO: letの例を書く)

　さて、5日目のときに、クロージャというものを説明した筈だ。