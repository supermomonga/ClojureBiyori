4.1日目: あの素晴らしい再帰をもう一度
------------------------------------

1. 再帰の荒野にぽつんと佇んで
------------------------------

　プログラマーの素質を測るための方法の一つとして、再帰を理解して書けるか、ということがたまに言われる。一度、その方法に慣れてしまうと簡単に書けるのだけれども、それを慣れるのには、非常に苦労をするのだろうと思う。

　そこで、4日目をもう一度再帰させ、再帰のサンプル集みたいなものを書いてみたいと思う。

2. パスカルの三角形を書く
------------------------

　まず最初に有名なものから始めたいと思う。それはパスカルの三角形を出力するという関数を、再帰する関数を使って定義してみよう。

　その前に、パスカルの三角形というものがどういうものかを説明しなければならない。パスカルの三角形とは、下のような三角形である。

```
    1
   1 1
  1 2 1
 1 3 3 1
1 4 6 4 1
```

　簡単に説明すれば、次の段を生成するさいに、前の段の数を二股に分ける。その二股が交差する場合、その数同士を足していくというルールだ。さすがに、この図のように綺麗に書くことは難しいので、妥協して

```
1
1 1
1 2 1
1 3 3 1
1 4 6 4 1
```

　というように出力できるようにしてみよう。

　まず最初に、単純な再帰関数を定義してみよう。既に`loop-recur`という用法を知っているが、それはあえて使わないことにしよう。

```clojure
(defn pascal
  ([nth] (pascal nth 1))
  ([nth start]
      (if (< nth start) ""
          (str start "\n" (pascal nth (+ start 1))))))  
```

　ここから、徐々にパスカルの三角形を作るための実装を取り入れていく。まずわりやすいところから、1のときは、1だけのリストを渡してあげるようにする。それ以外の部分については。他との違いを目だ足させるため、あえて`(2 2)`のリストを出力するようにしてみよう。

```clojure
(defn pascal
    ([nth] (pascal nth 1))
    ([nth start]
      (cond (< nth start) ""
            (= start 1) (str 1 "\n" (pascal nth (+ start 1)))
            :else (str 
            (apply str '(2 2)) "\n" (pascal nth (+ start 1))))))
```

　これで、1以外は、2ずつ出力されるようになったと思う。問題は、ピラミットの生成方法だが、今回は下のように考えてみたいと思う。

　パスカルの三角形の段は、下のように、前の段を左右にひとつずつずらすことによって、作成することが出来る。例えば
```
(01)    (011)    (0121)    (01331)
(10) => (110) => (1210) => (13310) ...
```

　といったように。とすると、任意のリストを与えられたときに、先頭に0を追加し、それを逆さにしたものを合わせるとよい。つまり

```clojure
(defn gen-nth-pascal [any-list]
  (let [fix-list (conj any-list 0)]
    (map + fix-list (reverse fix-list))))
```

　さて、この関数を利用して、パスカルの三角形を生成してみよう。ただし、今回は、前回のリストを保存するようにしないといけない。

```clojure
(defn pascal
    ([nth] (pascal nth 1 '()))
    ([nth start previous]
      (cond (< nth start) ""
            (= start 1) (str 1 "\n" (pascal nth (+ start 1) '(1)))
            :else (let [next-list (gen-nth-pascal previous)]
                  (str (str (apply str next-list)) "\n"
                  (pascal nth (+ start 1) next-list))))))
```

これで完成だ。
